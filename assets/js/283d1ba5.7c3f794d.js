"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[403],{7076:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>g,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var t=r(2540),o=r(3023);const a={title:"clear"},s=void 0,c={id:"merge-coverage/commands/clear",title:"clear",description:"Clears the coverage folder before running tests.",source:"@site/docs/merge-coverage/commands/clear.mdx",sourceDirName:"merge-coverage/commands",slug:"/merge-coverage/commands/clear",permalink:"/frontend/docs/merge-coverage/commands/clear",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"clear"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/frontend/docs/merge-coverage/introduction"},next:{title:"combine-coverage",permalink:"/frontend/docs/merge-coverage/commands/combine-coverage"}},i={},l=[{value:"API",id:"api",level:2},{value:"Optional Parameters",id:"optional-parameters",level:3},{value:"Usage",id:"usage",level:2},{value:"Clean coverage using the terminal",id:"clean-coverage-using-the-terminal",level:3},{value:"Clean coverage before running tests",id:"clean-coverage-before-running-tests",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Clears the coverage folder before running tests.\nThis command is useful when it runs before executing the pipeline of tests, like the ",(0,t.jsx)(n.code,{children:"pretest"})," pre-script hooks."]}),"\n",(0,t.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,t.jsx)(n.h3,{id:"optional-parameters",children:"Optional Parameters"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"# Custom reports folder\n--folder=<string>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.h3,{id:"clean-coverage-using-the-terminal",children:"Clean coverage using the terminal"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'# Option A - Ddefault folder ("coverage-reports/reports")\n$ merge-coverage clear\n\n# Option B - Custom folder\n$ merge-coverage clear --folder coverage-reports/cypress\n'})}),"\n",(0,t.jsx)(n.h3,{id:"clean-coverage-before-running-tests",children:"Clean coverage before running tests"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "devDependencies": {\n    "@jtmdias/merge-coverage": "x.y.z",\n  },\n  "scripts": {\n    "pretest": "merge-coverage clear --folder coverage",\n  }\n}\n'})})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},3023:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>c});var t=r(3696);const o={},a=t.createContext(o);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);